// Code generated by MockGen. DO NOT EDIT.
// Source: fish_pen.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/umitron-mission/sw-farm-full-stack-coding-template/models"
)

// MockIFishPenRepository is a mock of IFishPenRepository interface.
type MockIFishPenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFishPenRepositoryMockRecorder
}

// MockIFishPenRepositoryMockRecorder is the mock recorder for MockIFishPenRepository.
type MockIFishPenRepositoryMockRecorder struct {
	mock *MockIFishPenRepository
}

// NewMockIFishPenRepository creates a new mock instance.
func NewMockIFishPenRepository(ctrl *gomock.Controller) *MockIFishPenRepository {
	mock := &MockIFishPenRepository{ctrl: ctrl}
	mock.recorder = &MockIFishPenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFishPenRepository) EXPECT() *MockIFishPenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFishPenRepository) Create(fishPen *models.FishPen) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", fishPen)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIFishPenRepositoryMockRecorder) Create(fishPen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFishPenRepository)(nil).Create), fishPen)
}

// Delete mocks base method.
func (m *MockIFishPenRepository) Delete(fishPen *models.FishPen) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", fishPen)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIFishPenRepositoryMockRecorder) Delete(fishPen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIFishPenRepository)(nil).Delete), fishPen)
}

// ExistsByID mocks base method.
func (m *MockIFishPenRepository) ExistsByID(fishPenID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", fishPenID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockIFishPenRepositoryMockRecorder) ExistsByID(fishPenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockIFishPenRepository)(nil).ExistsByID), fishPenID)
}

// ExistsByName mocks base method.
func (m *MockIFishPenRepository) ExistsByName(farmID uint, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByName", farmID, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByName indicates an expected call of ExistsByName.
func (mr *MockIFishPenRepositoryMockRecorder) ExistsByName(farmID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByName", reflect.TypeOf((*MockIFishPenRepository)(nil).ExistsByName), farmID, name)
}

// GetAllForFarm mocks base method.
func (m *MockIFishPenRepository) GetAllForFarm(farmID uint) ([]*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForFarm", farmID)
	ret0, _ := ret[0].([]*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForFarm indicates an expected call of GetAllForFarm.
func (mr *MockIFishPenRepositoryMockRecorder) GetAllForFarm(farmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForFarm", reflect.TypeOf((*MockIFishPenRepository)(nil).GetAllForFarm), farmID)
}

// GetByID mocks base method.
func (m *MockIFishPenRepository) GetByID(fishPenID uint) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", fishPenID)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIFishPenRepositoryMockRecorder) GetByID(fishPenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIFishPenRepository)(nil).GetByID), fishPenID)
}

// GetByName mocks base method.
func (m *MockIFishPenRepository) GetByName(farmID uint, name string) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", farmID, name)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIFishPenRepositoryMockRecorder) GetByName(farmID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIFishPenRepository)(nil).GetByName), farmID, name)
}

// Save mocks base method.
func (m *MockIFishPenRepository) Save(fishPen *models.FishPen) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", fishPen)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIFishPenRepositoryMockRecorder) Save(fishPen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIFishPenRepository)(nil).Save), fishPen)
}
