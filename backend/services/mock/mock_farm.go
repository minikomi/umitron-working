// Code generated by MockGen. DO NOT EDIT.
// Source: farm.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/umitron-mission/sw-farm-full-stack-coding-template/models"
)

// MockIFarmService is a mock of IFarmService interface.
type MockIFarmService struct {
	ctrl     *gomock.Controller
	recorder *MockIFarmServiceMockRecorder
}

// MockIFarmServiceMockRecorder is the mock recorder for MockIFarmService.
type MockIFarmServiceMockRecorder struct {
	mock *MockIFarmService
}

// NewMockIFarmService creates a new mock instance.
func NewMockIFarmService(ctrl *gomock.Controller) *MockIFarmService {
	mock := &MockIFarmService{ctrl: ctrl}
	mock.recorder = &MockIFarmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFarmService) EXPECT() *MockIFarmServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIFarmService) GetAll() ([]*models.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIFarmServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIFarmService)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockIFarmService) GetByID(id uint) (*models.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIFarmServiceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIFarmService)(nil).GetByID), id)
}
