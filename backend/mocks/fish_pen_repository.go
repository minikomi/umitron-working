// Code generated by MockGen. DO NOT EDIT.
// Source: fish_pen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/umitron-mission/sw-farm-full-stack-coding-template/models"
)

// MockIFishPenRepository is a mock of IFishPenRepository interface.
type MockIFishPenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFishPenRepositoryMockRecorder
}

// MockIFishPenRepositoryMockRecorder is the mock recorder for MockIFishPenRepository.
type MockIFishPenRepositoryMockRecorder struct {
	mock *MockIFishPenRepository
}

// NewMockIFishPenRepository creates a new mock instance.
func NewMockIFishPenRepository(ctrl *gomock.Controller) *MockIFishPenRepository {
	mock := &MockIFishPenRepository{ctrl: ctrl}
	mock.recorder = &MockIFishPenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFishPenRepository) EXPECT() *MockIFishPenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFishPenRepository) Create(fishPen *models.FishPen) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", fishPen)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIFishPenRepositoryMockRecorder) Create(fishPen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFishPenRepository)(nil).Create), fishPen)
}

// DeleteByID mocks base method.
func (m *MockIFishPenRepository) DeleteByID(fishPenID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", fishPenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIFishPenRepositoryMockRecorder) DeleteByID(fishPenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIFishPenRepository)(nil).DeleteByID), fishPenID)
}

// ExistsByID mocks base method.
func (m *MockIFishPenRepository) ExistsByID(fishPenID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", fishPenID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID.
func (mr *MockIFishPenRepositoryMockRecorder) ExistsByID(fishPenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockIFishPenRepository)(nil).ExistsByID), fishPenID)
}

// ExistsByNameForFarm mocks base method.
func (m *MockIFishPenRepository) ExistsByNameForFarm(farmID uint, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByNameForFarm", farmID, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByNameForFarm indicates an expected call of ExistsByNameForFarm.
func (mr *MockIFishPenRepositoryMockRecorder) ExistsByNameForFarm(farmID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByNameForFarm", reflect.TypeOf((*MockIFishPenRepository)(nil).ExistsByNameForFarm), farmID, name)
}

// GetAllForFarm mocks base method.
func (m *MockIFishPenRepository) GetAllForFarm(farmID uint) ([]*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForFarm", farmID)
	ret0, _ := ret[0].([]*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForFarm indicates an expected call of GetAllForFarm.
func (mr *MockIFishPenRepositoryMockRecorder) GetAllForFarm(farmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForFarm", reflect.TypeOf((*MockIFishPenRepository)(nil).GetAllForFarm), farmID)
}

// GetByID mocks base method.
func (m *MockIFishPenRepository) GetByID(fishPenID uint) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", fishPenID)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIFishPenRepositoryMockRecorder) GetByID(fishPenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIFishPenRepository)(nil).GetByID), fishPenID)
}

// GetByNameForFarm mocks base method.
func (m *MockIFishPenRepository) GetByNameForFarm(farmID uint, name string) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameForFarm", farmID, name)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameForFarm indicates an expected call of GetByNameForFarm.
func (mr *MockIFishPenRepositoryMockRecorder) GetByNameForFarm(farmID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameForFarm", reflect.TypeOf((*MockIFishPenRepository)(nil).GetByNameForFarm), farmID, name)
}

// Update mocks base method.
func (m *MockIFishPenRepository) Update(fishPen *models.FishPen) (*models.FishPen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", fishPen)
	ret0, _ := ret[0].(*models.FishPen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIFishPenRepositoryMockRecorder) Update(fishPen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIFishPenRepository)(nil).Update), fishPen)
}
